/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import servers.Cliente;

/**
 *
 * @author Raul
 */
public class Examen extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form Inicio
     */
    public int[][] tabla_jugador = new int[15][15], tabla_rival = new int[15][15];

    /**
     * Creates new form Examen
     */
    int x = 0, y = 0;
    private boolean permiso = true, permisoRival = false;
    public String[] palabras;
    public int caracteres = 0;
    public JButton[][] tablero_jugador = new JButton[15][15];
    public JButton[][] tablero_rival = new JButton[15][15];

    private String respuesta, tipoJugador = null, eco;
    private Socket cliente;
    private PrintWriter pw;
    private BufferedReader br;

    public Examen(int[][] tj, JButton[][] tbj) {
        conecta();
        initComponents();
        tabla_jugador = tj;
        tablero_jugador = tbj;
        tabla_rival = new int[15][15];
        tablero_rival = tbj;
        GeneraTablero(tabla_jugador, jPanel1, tablero_jugador);
        GeneraTablero(tabla_rival, jPanel2, tablero_rival);
        if ("aceptadoRival".equals(tipoJugador)) {
            ciclo();
        }
        super.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 339, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 296, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(51, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 366, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("Mi tablero");

        jLabel2.setText("Tablero rival");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2))
                                .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(25, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    public void GeneraTablero(int[][] matriz, JPanel panel, JButton[][] botones) {
        GridLayout tablero = new GridLayout(15, 15);
        panel.setLayout(tablero);
        for (int i = 0; i < 15; i++) {
            for (int j = 0; j < 15; j++) {
                botones[i][j] = new JButton(matriz[i][j] + "");
                botones[i][j].setName(i + "," + j);
                if (matriz[i][j] == 1) {
                    botones[i][j].setBackground(Color.GREEN);
                } else {
                    botones[i][j].setBackground(Color.BLUE);
                }
                botones[i][j].setSize(50, 50);
                botones[i][j].addActionListener(this);
                panel.add(botones[i][j]);
            }
        }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration                   

    public void conecta() {
        try {
            this.respuesta = "true";
            this.cliente = new Socket("localhost", 2222);
            this.pw = new PrintWriter(new OutputStreamWriter(cliente.getOutputStream()));
            this.br = new BufferedReader(new InputStreamReader(cliente.getInputStream()));
            this.tipoJugador = this.br.readLine();
            System.out.println("Mensaje Prin: " + this.tipoJugador);
            this.setName(tipoJugador);
            if ("aceptado".equals(tipoJugador)) {
                permiso = true;
            } else {
                permisoRival = false;
            }
            JOptionPane.showMessageDialog(rootPane, "Esperando Rival");
            String datoInit = this.br.readLine();
            if ("inicia".equals(datoInit.substring(datoInit.indexOf("<%") + 2, datoInit.indexOf("%>")))) {
                JOptionPane.showMessageDialog(rootPane, "Rival conectado");
            }
            System.out.println("INICIAR: " + datoInit.substring(datoInit.indexOf("<%") + 2, datoInit.indexOf("%>")));
        } catch (IOException ex) {
            Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void actionPerformed(ActionEvent e) {
        JButton aux = (JButton) e.getSource();
        StringTokenizer st = new StringTokenizer(aux.getName(), ",");
        x = Integer.parseInt(st.nextToken());
        y = Integer.parseInt(st.nextToken());
        System.out.println("RESPUESTA: " + respuesta + " PERMISO: " + permiso);
        if ("aceptado".equals(tipoJugador) && permiso == false) {
            JOptionPane.showMessageDialog(rootPane, "No puedes tirar aún no es tu turno");
        }
        if ("aceptadoRival".equals(tipoJugador) && permisoRival == false) {
            JOptionPane.showMessageDialog(rootPane, "No puedes tirar aún no es tu turno");
        }
        if (("aceptado".equals(tipoJugador) && permiso == true)) {
            System.out.println("ACEPTADO - TRUE");
            try {
                tablero_rival[x][y].setEnabled(false);
                sendDato("" + x + "," + y + ""); //Envía coordenada de tiro
                respuesta = br.readLine(); //Recibe la respuesta del Rival para ver si le atino o no
                // System.out.println("A-T RESPUESTA"+respuesta);
                if (respuesta.indexOf("<%") > 0) {
                    respuesta = respuesta.substring(respuesta.indexOf("<%") + 2, respuesta.indexOf("%>"));
                }
                System.out.println("SALIDA: " + respuesta + " BOOL: " + permiso);
                if ("true".equals(respuesta)) {
                    System.out.println("TRUE");
                    tablero_rival[x][y].setText("x");
                    tablero_rival[x][y].setBackground(Color.red);
                    permiso = true;
                }
                if ("false".equals(respuesta)) {
                    System.out.println("FALSE");
                    tablero_rival[x][y].setText("o");
                    tablero_rival[x][y].setBackground(Color.GRAY);
                    permiso = false;
                    ciclo(); //Lo deja a la espera de recibir un tiro del Rival
                }
            } catch (IOException ex) {
                Logger.getLogger(Examen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if ("aceptadoRival".equals(tipoJugador) && permisoRival == true) {
            try {
                System.out.println("ACEPTADORival - TRUE");
                tablero_rival[x][y].setEnabled(false);
                sendDato("" + x + "," + y + "");
                respuesta = br.readLine();
                if (respuesta.indexOf("<%") > 0) {
                    respuesta = respuesta.substring(respuesta.indexOf("<%") + 2, respuesta.indexOf("%>"));
                }
                System.out.println("SALIDA: " + respuesta + " BOOL: " + permisoRival);
                if ("true".equals(respuesta)) {
                    System.out.println("TRUERival");
                    tablero_rival[x][y].setText("x");
                    tablero_rival[x][y].setBackground(Color.red);
                    permisoRival = true;
                }
                if ("false".equals(respuesta)) {
                    System.out.println("FALSERival");
                    tablero_rival[x][y].setText("o");
                    tablero_rival[x][y].setBackground(Color.GRAY);
                    permisoRival = false;
                    ciclo();
                }
            } catch (IOException ex) {
                Logger.getLogger(Examen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void ciclo() {
        try {
            System.out.println("CICLO - " + respuesta + " - " + tipoJugador);
            //Mantiene el control sobre el jugador principal, peritiendole tirar continuamente hasta que falle
            if ("aceptadoRival".equals(tipoJugador) && "true".equals(respuesta)) {
                    System.out.println("TRUERivalRecibe");
                    eco = br.readLine();
                    eco = eco.substring(eco.indexOf("<%") + 2, eco.indexOf("%>"));
                    System.out.println("Posicion OBTENIDA DESCOM: " + eco);
                    if (eco.contains(",")) {
                        x = Integer.parseInt(eco.substring(0, eco.indexOf(",")));
                        y = Integer.parseInt(eco.substring(eco.indexOf(",") + 1));
                        String dato;
                        //En esta parte se validara que le atine al barco sino tiene que mandar forzosamente un false para pasar
                        //el control de los tiros al Rival
                        if (tabla_jugador[x][y] == 0) {
                            tablero_jugador[x][y].setBackground(Color.gray);
                            tablero_jugador[x][y].setText("o");
                            dato = "false";
                            permisoRival = true;
                        } else {
                            tablero_jugador[x][y].setBackground(Color.yellow);
                            tablero_jugador[x][y].setText("X");
                            tabla_jugador[x][y] = 0;
                            dato = "true";
                            permisoRival = false;
                        }
                        System.out.println("INFO SALIDA\n DATO: " + dato+"\nPERMISOOP: "+permisoRival);
                        respuesta = dato;
                        sendDato(respuesta);
                        if ("true".equals(dato)) {
                            ciclo();
                        }
                    }
            }
            //Quiere decir que el jugador principal fallo y ahora es el turno del Rival de tirar
            if ("false".equals(respuesta)&&"aceptado".equals(tipoJugador)) {
                System.out.println("FALSEPrincipalRecibe");
                //Jugador principal mantiene a la espera de los tiros del Rival
                    eco = br.readLine();
                    eco = eco.substring(eco.indexOf("<%") + 2, eco.indexOf("%>"));
                    System.out.println("Posicion OBTENIDA DESCOM: " + eco);
                    if (eco.contains(",")) {
                        x = Integer.parseInt(eco.substring(0, eco.indexOf(",")));
                        y = Integer.parseInt(eco.substring(eco.indexOf(",") + 1));
                        String dato;
                        //En esta parte se validara que le atine al barco sino tiene que mandar forzosamente un false para pasar
                        //el control de los tiros al Rival
                        if (tabla_jugador[x][y] == 0) {
                            tablero_rival[x][y].setBackground(Color.gray);
                            tablero_rival[x][y].setText("o");
                            dato = "false";
                            respuesta = "true";
                            permiso = true;
                        } else {
                            tablero_rival[x][y].setBackground(Color.yellow);
                            tablero_rival[x][y].setText("X");
                            tabla_jugador[x][y] = 0;
                            dato = "true";
                            respuesta = "false";
                            permiso = false;
                        }
                        System.out.println("INFO SALIDA\n DATO: " + dato+"\nPERMIS: "+permiso);
                        sendDato(dato);
                        if ("true".equals(dato)) {
                            ciclo();
                        }
                    }
            }
        } catch (IOException ex) {
            Logger.getLogger(Examen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void sendDato(Object object) {
        pw.println(object);
        pw.flush();
    }

    public void setTablaJugador(int[][] tabla_jugador) {
        this.tabla_jugador = tabla_jugador;
    }

    public void setTableroJugador(JButton[][] tablero_jugador) {
        this.tablero_jugador = tablero_jugador;
    }
    /*if (isGameOver(tabla_rival)) {
     JOptionPane.showMessageDialog(null, "Todos los barcos han sido undidos");
     }
     }*/

    private boolean isGameOver(int[][] tabla_rival) {
        boolean acabo = false;
        int hayUNO = 0;
        for (int i = 0; i < 15; i++) {
            for (int j = 0; j < 15; j++) {
                if (tabla_rival[i][j] == 1) {
                    hayUNO = 1;
                }
            }
        }
        if (hayUNO == 1) {
            acabo = false;
        } else {
            acabo = true;
        }
        return acabo;
    }
}